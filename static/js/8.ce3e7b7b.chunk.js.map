{"version":3,"sources":["pages/Relationship.tsx","hooks/useSocial.ts","components/Button.tsx"],"names":["visualRelationship","internalRoutes","VisualComponent","component","Relationship","connections","useSocial","history","useHistory","relation","useLocation","pathname","split","slice","formik","useFormik","onSubmit","values","actions","Number","personId1","personId2","push","setSubmitting","initialValues","validationSchema","yup","shape","required","mapConnectionOptions","eliminateId","reduce","acc","val","id","text","firstName","lastName","value","handleChange","_","name","target","Row","Column","computer","tablet","attached","Item","header","handleSubmit","Group","widths","Dropdown","fluid","search","selection","label","onChange","options","error","errors","color","type","disabled","isValid","disabledContent","path","exact","useContext","SocialContext","Button","props","buttonProps","as","to","onClick","defaultButtonProps","className","style","mergeButtonProps","button","children","content","trigger"],"mappings":"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","file":"static/js/8.ce3e7b7b.chunk.js","sourcesContent":["import { SyntheticEvent } from \"react\";\r\nimport { Switch, Route, useHistory, useLocation } from \"react-router-dom\";\r\nimport { Menu, Segment, Form, Grid, DropdownProps } from \"semantic-ui-react\";\r\nimport { useFormik } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport Button from \"../components/Button\";\r\nimport { internalRoutes } from \"../routes-config/App.routes\";\r\nimport useSocial from \"../hooks/useSocial\";\r\nimport { IDropdownOptionProps } from \"../interfaces\";\r\n\r\nconst { visualRelationship } = internalRoutes();\r\nconst VisualComponent = visualRelationship.component;\r\n\r\nexport default function Relationship() {\r\n  const { connections } = useSocial();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const relation = location.pathname.split(\"/\").slice(2, 3)[0];\r\n  const formik = useFormik({\r\n    onSubmit: (values, actions) => {\r\n      if (\r\n        Number(values.personId1) &&\r\n        Number(values.personId2) &&\r\n        Number(values.personId1) !== Number(values.personId2)\r\n      ) {\r\n        history.push(`/relationship/${values.personId1}-${values.personId2}`);\r\n        actions.setSubmitting(false);\r\n      }\r\n    },\r\n    initialValues: {\r\n      personId1: !!relation ? Number(relation.split(\"-\")[0]) : \"\",\r\n      personId2: !!relation ? Number(relation.split(\"-\")[1]) : \"\",\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      personId1: yup.mixed().required(\"Required\"),\r\n      personId2: yup.mixed().required(\"Required\"),\r\n    }),\r\n  });\r\n\r\n  const mapConnectionOptions = (eliminateId: number | string) =>\r\n    connections.reduce((acc, val) => {\r\n      if (val.id !== eliminateId)\r\n        acc.push({ text: `${val.firstName} ${val.lastName}`, value: val.id });\r\n      return acc;\r\n    }, [] as IDropdownOptionProps[]);\r\n\r\n  const handleChange = (\r\n    _: SyntheticEvent<HTMLElement, Event>,\r\n    { name, value }: DropdownProps\r\n  ) => {\r\n    formik.handleChange({ target: { name, value } });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column computer={16} tablet={16}>\r\n            <Menu attached=\"top\">\r\n              <Menu.Item header>Select Persons</Menu.Item>\r\n            </Menu>\r\n            <Segment attached=\"bottom\">\r\n              <Form onSubmit={formik.handleSubmit}>\r\n                <Form.Group widths={2}>\r\n                  <Form.Dropdown\r\n                    fluid\r\n                    search\r\n                    selection\r\n                    label=\"Person 1\"\r\n                    name=\"personId1\"\r\n                    value={formik.values.personId1}\r\n                    onChange={handleChange}\r\n                    options={mapConnectionOptions(formik.values.personId2)}\r\n                    error={formik.errors.personId1}\r\n                  />\r\n                  <Form.Dropdown\r\n                    fluid\r\n                    search\r\n                    selection\r\n                    label=\"Person 2\"\r\n                    name=\"personId2\"\r\n                    value={formik.values.personId2}\r\n                    onChange={handleChange}\r\n                    options={mapConnectionOptions(formik.values.personId1)}\r\n                    error={formik.errors.personId2}\r\n                  />\r\n                </Form.Group>\r\n                <Button\r\n                  color=\"green\"\r\n                  type=\"submit\"\r\n                  disabled={!formik.isValid}\r\n                  disabledContent\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n      <Switch>\r\n        <Route\r\n          path={visualRelationship.path}\r\n          exact={visualRelationship.exact}\r\n          component={VisualComponent}\r\n        />\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { SocialContext } from \"../context/SocialContext\";\r\n\r\nexport default function useSocial() {\r\n  return useContext(SocialContext);\r\n}\r\n","import { Button as SemanticButton, Popup } from \"semantic-ui-react\";\r\nimport { IPopupProps, IButtonProps } from \"../interfaces\";\r\n\r\nexport default function Button(props: IButtonProps | IPopupProps) {\r\n  const buttonProps = { as: props.as, to: props.to, onClick: props.onClick };\r\n  const defaultButtonProps = {\r\n    color: props.color,\r\n    className: props.disabled\r\n      ? `disabled-button${props.className ? \" \" + props.className : \"\"}`\r\n      : props.className,\r\n    style: props.style,\r\n    type: props.type,\r\n  };\r\n  const mergeButtonProps = props.disabled\r\n    ? defaultButtonProps\r\n    : { ...defaultButtonProps, ...buttonProps };\r\n  const button = (\r\n    <SemanticButton {...mergeButtonProps}>{props.children}</SemanticButton>\r\n  );\r\n\r\n  return props.disabled ? (\r\n    <Popup\r\n      disabled={props.disabledContent}\r\n      content={props.content}\r\n      trigger={button}\r\n    />\r\n  ) : (\r\n    button\r\n  );\r\n}\r\n"],"sourceRoot":""}