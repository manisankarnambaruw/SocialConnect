{"version":3,"sources":["components/VisualRelationsip.tsx","hooks/useSocial.ts"],"names":["VisualRelationship","relation","useParams","useSocial","connections","relations","useState","person1","setPerson1","person2","setPerson2","idsArr","done","degreeOfRelation","setDegreeOfRelation","history","useHistory","useEffect","personId1","includes","Number","split","personId2","find","c","id","degreeOfSeparation","pId","cId","ids","forEach","r","peopleId","connectedPeopleId","push","length","splice","value","filter","v","some","every","e","toast","warning","attached","Item","header","firstName","name","map","idArr","index","RelationPerson","CalculateSeparationLine","refId","info","size","color","loading","props","connection","style","minWidth","lastName","maxWidth","to","circular","relationTypes","content","width","state","setState","rel","relationType","relType","text","useContext","SocialContext"],"mappings":"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","file":"static/js/9.1df0f802.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { useParams, useHistory, NavLink } from \"react-router-dom\";\r\nimport { Icon, Segment, Menu, Message } from \"semantic-ui-react\";\r\nimport { toast } from \"react-toastify\";\r\nimport useSocial from \"../hooks/useSocial\";\r\nimport {\r\n  IDegreeOfRelation,\r\n  IRelationData,\r\n  IStyles,\r\n  IUserData,\r\n} from \"../interfaces\";\r\nimport {\r\n  DegreeOfSeparationWrapper,\r\n  PersonWrapper,\r\n  ScrollingX,\r\n  SeparationLine,\r\n} from \"./styled\";\r\n\r\nexport default function VisualRelationship() {\r\n  const { relation } = useParams<{ relation: string }>();\r\n  const { connections, relations } = useSocial();\r\n  const [person1, setPerson1] = useState<IUserData>({} as IUserData);\r\n  const [person2, setPerson2] = useState<IUserData>({} as IUserData);\r\n  const [degreeOfRelation, setDegreeOfRelation] = useState<IDegreeOfRelation>({\r\n    idsArr: [],\r\n    done: false,\r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const personId1 = relation.includes(\"-\")\r\n      ? Number(relation.split(\"-\")[0])\r\n      : -1;\r\n    const personId2 = relation.includes(\"-\")\r\n      ? Number(relation.split(\"-\")[1])\r\n      : -1;\r\n\r\n    const person1 = connections.find((c) => c.id === personId1);\r\n    const person2 = connections.find((c) => c.id === personId2);\r\n\r\n    const degreeOfSeparation = (\r\n      pId: string | number,\r\n      cId: string | number,\r\n      relations: IRelationData[]\r\n    ) => {\r\n      const ids = [pId] as (string | number)[],\r\n        idsArr = [] as (string | number)[][];\r\n      relations.forEach((r) => {\r\n        if (\r\n          (r.peopleId === pId || r.connectedPeopleId === pId) &&\r\n          pId !== cId\r\n        ) {\r\n          if (r.connectedPeopleId === cId || r.peopleId === cId) {\r\n            ids.push(cId);\r\n            if (ids.length > 1) idsArr.push([...ids]);\r\n            ids.splice(1, ids.length - 1);\r\n          } else {\r\n            const value = degreeOfSeparation(\r\n              r.peopleId === pId ? r.connectedPeopleId : r.peopleId,\r\n              cId,\r\n              relations.filter(\r\n                (r) => !(r.peopleId === pId || r.connectedPeopleId === pId)\r\n              )\r\n            );\r\n            if (value.idsArr.length > 0) {\r\n              value.idsArr.forEach((v) => {\r\n                if (\r\n                  !idsArr.some(\r\n                    (id) =>\r\n                      [...ids, ...v].length === id.length &&\r\n                      id.every((e) => [...ids, ...v].includes(e))\r\n                  )\r\n                )\r\n                  idsArr.push([...ids, ...v]);\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n      return { idsArr, done: true };\r\n    };\r\n\r\n    if (!(person1 && person2)) {\r\n      toast.warning(\"Unable to find person\");\r\n      history.push(\"/relationship\");\r\n    } else {\r\n      setPerson1(person1);\r\n      setPerson2(person2);\r\n      setDegreeOfRelation(\r\n        degreeOfSeparation(person1.id, person2.id, relations)\r\n      );\r\n    }\r\n  }, [relation]);\r\n\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\">\r\n        <Menu.Item header>\r\n          {person1.firstName}&nbsp; <Icon name=\"linkify\" /> {person2.firstName}\r\n        </Menu.Item>\r\n      </Menu>\r\n      <Segment attached=\"bottom\">\r\n        <ScrollingX>\r\n          {!degreeOfRelation.done ? (\r\n            <>\r\n              <Icon name=\"circle notched\" size=\"large\" color=\"blue\" loading />{\" \"}\r\n              Loading\r\n            </>\r\n          ) : degreeOfRelation.idsArr.length > 0 ? (\r\n            degreeOfRelation.idsArr.map((idArr) => (\r\n              <DegreeOfSeparationWrapper>\r\n                {idArr.map((id, index) => (\r\n                  <>\r\n                    <RelationPerson id={id} />\r\n                    {idArr.length - 1 !== index && (\r\n                      <CalculateSeparationLine\r\n                        id={id}\r\n                        refId={idArr[index + 1]}\r\n                      />\r\n                    )}\r\n                  </>\r\n                ))}\r\n              </DegreeOfSeparationWrapper>\r\n            ))\r\n          ) : (\r\n            <Message info>No Relations found</Message>\r\n          )}\r\n        </ScrollingX>\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction RelationPerson(props: { id: string | number }) {\r\n  const { connections } = useSocial();\r\n  const connection = connections.find((c) => c.id === props.id);\r\n  return !!connection ? (\r\n    <PersonWrapper\r\n      style={{\r\n        minWidth:\r\n          `${connection.firstName} ${connection.lastName}`.length * 10 +\r\n          44 +\r\n          \"px\",\r\n        maxWidth:\r\n          `${connection.firstName} ${connection.lastName}`.length * 10 +\r\n          44 +\r\n          \"px\",\r\n      }}\r\n    >\r\n      <NavLink to={`/add/${connection.id}`}>\r\n        <Icon name=\"user\" size=\"large\" circular />\r\n        {`${connection.firstName} ${connection.lastName}`}\r\n      </NavLink>\r\n    </PersonWrapper>\r\n  ) : (\r\n    <>Couldn't find the person</>\r\n  );\r\n}\r\n\r\nfunction CalculateSeparationLine(props: {\r\n  id: number | string;\r\n  refId: number | string;\r\n}) {\r\n  const { relations, relationTypes } = useSocial();\r\n  const [state, setState] = useState<IStyles>({\r\n    content: \"Calculating...\",\r\n    width: \"100px\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const relation = relations.find(\r\n      (rel) =>\r\n        (rel.peopleId === props.id && rel.connectedPeopleId === props.refId) ||\r\n        (rel.connectedPeopleId === props.id && rel.peopleId === props.refId)\r\n    );\r\n    const relationType = relationTypes.find(\r\n      (relType) => relType.value === relation?.relationType\r\n    );\r\n    setState({\r\n      content: relationType?.text || \"Unknown\",\r\n      width: !!relationType ? `${relationType?.text.length * 15}px` : \"100px\",\r\n    });\r\n  }, [relations, relationTypes, props.id, props.refId]);\r\n  return (\r\n    <SeparationLine width={state.width}>\r\n      <span>{state.content}</span>\r\n    </SeparationLine>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { SocialContext } from \"../context/SocialContext\";\r\n\r\nexport default function useSocial() {\r\n  return useContext(SocialContext);\r\n}\r\n"],"sourceRoot":""}