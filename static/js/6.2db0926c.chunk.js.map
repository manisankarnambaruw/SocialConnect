{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/Relations.tsx","components/RelationshipGrid.tsx","components/RelationshipTypes.tsx","pages/Add.tsx","hooks/useSocial.ts","components/Button.tsx","components/DataGrid.tsx","components/PeopleGrid.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","Relations","useSocial","connections","relations","addRelation","relationTypes","deleteRelation","peopleId","useParams","useState","rows","setRows","showDetails","setShowDetails","selectedIds","setSelectedIds","formik","useFormik","initialValues","connectedPeopleId","relationType","onSubmit","values","actions","postFakeRequest","then","data","some","r","Number","setSubmitting","toast","success","resetForm","validationSchema","yup","shape","required","useEffect","reduce","acc","curr","connect","find","c","id","push","Menu","attached","Item","header","Segment","Form","handleSubmit","Dropdown","fluid","search","selection","label","name","value","options","filter","map","includes","text","firstName","lastName","onChange","_","handleChange","error","errors","Button","color","type","onClick","loading","isSubmitting","disabled","isEmpty","disabledContent","PeopleGrid","minHeight","onSelectionChange","selected","s","content","err","console","log","onDeleteRelation","columns","maxWidth","defaultFlex","minWidth","RelationshipGrid","DataGrid","idProperty","checkboxColumn","checkboxOnlyRowSelect","RelationshipTypes","addRelationType","deleteRelationType","selectedValues","setSelectedValues","min","max","test","path","createError","existing","Array","isArray","message","Input","autoComplete","toUpperCase","AddPeople","addConnection","updateConnection","history","useHistory","connection","setFieldValue","matches","setValues","goBack","Grid","Row","Column","computer","tablet","mobile","largeScreen","as","NavLink","to","style","marginBottom","useContext","SocialContext","props","buttonProps","defaultButtonProps","className","mergeButtonProps","button","children","trigger","GridWrapper","styled","ReactDataGrid","dataSource","pagination","limit","render"],"mappings":"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","file":"static/js/6.2db0926c.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import { useState, useEffect } from \"react\";\r\nimport { Menu, Segment, Form } from \"semantic-ui-react\";\r\nimport { postFakeRequest, isEmpty } from \"../utils\";\r\nimport PeopleGrid from \"./PeopleGrid\";\r\nimport { useFormik } from \"formik\";\r\nimport useSocial from \"../hooks/useSocial\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { IPeopleParams, IUserData } from \"../interfaces\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as yup from \"yup\";\r\nimport Button from \"./Button\";\r\n\r\nexport default function Relations() {\r\n  const { connections, relations, addRelation, relationTypes, deleteRelation } =\r\n    useSocial();\r\n  const { peopleId } = useParams<IPeopleParams>();\r\n  const [rows, setRows] = useState<IUserData[]>([] as IUserData[]);\r\n  const [showDetails, setShowDetails] = useState<boolean>(false);\r\n  const [selectedIds, setSelectedIds] = useState<number[]>([]);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      peopleId: peopleId,\r\n      connectedPeopleId: \"\",\r\n      relationType: \"\",\r\n    },\r\n    onSubmit: (values, actions) => {\r\n      postFakeRequest(values).then((data: any) => {\r\n        if (\r\n          !relations.some(\r\n            (r) =>\r\n              r.peopleId === Number(peopleId) &&\r\n              r.connectedPeopleId === Number(values.connectedPeopleId)\r\n          )\r\n        ) {\r\n          addRelation({ ...data, peopleId: Number(peopleId) });\r\n          actions.setSubmitting(false);\r\n          toast.success(\"Successfully Added\");\r\n          actions.resetForm();\r\n          setShowDetails(false);\r\n        }\r\n      });\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      connectedPeopleId: yup.number().required(\"Required\"),\r\n      relationType: yup.string().required(\"Required\"),\r\n    }),\r\n  });\r\n\r\n  const onDeleteRelation = () => {\r\n    try {\r\n      deleteRelation(selectedIds, Number(peopleId));\r\n      setSelectedIds([]);\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast.error(\"Unable to delete\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setRows(\r\n      relations.reduce((acc, curr) => {\r\n        const connect = connections.find(\r\n          (c) =>\r\n            (c.id === curr.connectedPeopleId &&\r\n              curr.peopleId === Number(peopleId)) ||\r\n            (Number(peopleId) === curr.connectedPeopleId &&\r\n              c.id === curr.peopleId)\r\n        );\r\n        if (!!connect) acc.push(connect);\r\n        return acc;\r\n      }, [] as IUserData[])\r\n    );\r\n  }, [connections, peopleId, relations]);\r\n\r\n  useEffect(() => {\r\n    setSelectedIds([]);\r\n  }, [peopleId, showDetails]);\r\n\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\">\r\n        <Menu.Item header>Relations</Menu.Item>\r\n      </Menu>\r\n      <Segment attached=\"bottom\">\r\n        {!showDetails ? (\r\n          <>\r\n            <PeopleGrid\r\n              rows={rows}\r\n              minHeight={350}\r\n              onSelectionChange={(selected) =>\r\n                setSelectedIds(\r\n                  typeof selected === \"boolean\"\r\n                    ? rows.map((r) => Number(r.id))\r\n                    : Object.keys(selected).map((s) => Number(s))\r\n                )\r\n              }\r\n            />\r\n            <Button\r\n              color=\"instagram\"\r\n              disabled={!(peopleId !== \"new\" && Number(peopleId))}\r\n              onClick={() => setShowDetails(true)}\r\n              content={\"Create a Person\"}\r\n            >\r\n              Add\r\n            </Button>\r\n            <Button\r\n              color=\"youtube\"\r\n              disabled={\r\n                !(peopleId !== \"new\" && Number(peopleId) && selectedIds.length)\r\n              }\r\n              onClick={() => onDeleteRelation()}\r\n              content={\r\n                !(peopleId !== \"new\" && Number(peopleId))\r\n                  ? \"Create a Person\"\r\n                  : \"Select a relation\"\r\n              }\r\n            >\r\n              Delete\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <Form onSubmit={formik.handleSubmit}>\r\n            <Form.Dropdown\r\n              fluid\r\n              search\r\n              selection\r\n              label=\"Connection\"\r\n              name=\"connectedPeopleId\"\r\n              value={formik.values.connectedPeopleId}\r\n              options={connections\r\n                .filter(\r\n                  (c) =>\r\n                    !rows.map((r) => r.id).includes(c.id) &&\r\n                    c.id !== Number(peopleId)\r\n                )\r\n                .map((c) => ({\r\n                  value: c.id,\r\n                  text: `${c.firstName} ${c.lastName}`,\r\n                }))}\r\n              onChange={(_, { name, value }) =>\r\n                formik.handleChange({ target: { name, value } })\r\n              }\r\n              error={formik.errors.connectedPeopleId}\r\n            />\r\n\r\n            <Form.Dropdown\r\n              fluid\r\n              search\r\n              selection\r\n              label=\"Relationship\"\r\n              name=\"relationType\"\r\n              value={formik.values.relationType}\r\n              options={relationTypes}\r\n              onChange={(_, { name, value }) =>\r\n                formik.handleChange({ target: { name, value } })\r\n              }\r\n              error={formik.errors.relationType}\r\n            />\r\n\r\n            <Button\r\n              color=\"orange\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                formik.resetForm();\r\n                setShowDetails(false);\r\n              }}\r\n            >\r\n              Back\r\n            </Button>\r\n\r\n            <Button\r\n              color=\"green\"\r\n              type=\"submit\"\r\n              loading={formik.isSubmitting}\r\n              disabled={formik.isSubmitting || !isEmpty(formik.errors)}\r\n              disabledContent\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n","import { IRelationshipGridProps } from \"../interfaces\";\r\nimport DataGrid from \"./DataGrid\";\r\n\r\nconst columns = [\r\n  {\r\n    name: \"text\",\r\n    header: \"Type\",\r\n    maxWidth: 100,\r\n    defaultFlex: 2,\r\n  },\r\n  {\r\n    name: \"value\",\r\n    header: \"code\",\r\n    minWidth: 50,\r\n    defaultFlex: 1,\r\n  },\r\n];\r\n\r\nexport default function RelationshipGrid({\r\n  rows,\r\n  onSelectionChange,\r\n  minHeight,\r\n}: IRelationshipGridProps) {\r\n  return (\r\n    <DataGrid\r\n      idProperty=\"value\"\r\n      columns={columns}\r\n      minHeight={minHeight}\r\n      rows={rows}\r\n      onSelectionChange={({ selected }) => onSelectionChange(selected)}\r\n      checkboxColumn\r\n      checkboxOnlyRowSelect\r\n    />\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Menu, Segment, Form } from \"semantic-ui-react\";\r\nimport { useFormik } from \"formik\";\r\nimport { toast } from \"react-toastify\";\r\nimport { isEmpty } from \"../utils\";\r\nimport RelationshipGrid from \"./RelationshipGrid\";\r\nimport useSocial from \"../hooks/useSocial\";\r\nimport Button from \"./Button\";\r\nimport { postFakeRequest } from \"../utils\";\r\nimport * as yup from \"yup\";\r\n\r\nexport default function RelationshipTypes() {\r\n  const { relationTypes, addRelationType, deleteRelationType } = useSocial();\r\n  const [showDetails, setShowDetails] = useState<boolean>(false);\r\n  const [selectedValues, setSelectedValues] = useState<string[]>([]);\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      value: \"\",\r\n      text: \"\",\r\n    },\r\n    onSubmit: (values, actions) => {\r\n      postFakeRequest(values).then((data: any) => {\r\n        addRelationType(data.value, data.text);\r\n        actions.setSubmitting(false);\r\n        toast.success(\"Successfully Added\");\r\n        actions.resetForm();\r\n        setShowDetails(false);\r\n      });\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      value: yup\r\n        .string()\r\n        .required(\"Required\")\r\n        .min(2, \"More than 2 characters\")\r\n        .max(4, \"Must not exceed 4 characters\")\r\n        .test(\"unique\", (value = \"\", { path, createError }) => {\r\n          const existing = relationTypes.map((r) => r.value);\r\n          return (\r\n            (Array.isArray(existing)\r\n              ? !existing.includes(value)\r\n              : existing !== value) ||\r\n            createError({ path, message: \"Already in use\" })\r\n          );\r\n        }),\r\n      text: yup\r\n        .string()\r\n        .required(\"Required\")\r\n        .min(2, \"More than 2 characters\")\r\n        .max(10, \"Must not exceed 10 characters\"),\r\n    }),\r\n  });\r\n\r\n  const onDeleteRelation = () => {\r\n    try {\r\n      deleteRelationType(selectedValues);\r\n      setSelectedValues([]);\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast.error(\"Unable to delete\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\">\r\n        <Menu.Item header>Relationship Types</Menu.Item>\r\n      </Menu>\r\n      <Segment attached=\"bottom\">\r\n        {!showDetails ? (\r\n          <>\r\n            <RelationshipGrid\r\n              rows={relationTypes}\r\n              minHeight={250}\r\n              onSelectionChange={(selected) =>\r\n                setSelectedValues(\r\n                  typeof selected === \"boolean\"\r\n                    ? relationTypes.map((r) => r.value)\r\n                    : Object.keys(selected).map((s) => s)\r\n                )\r\n              }\r\n            />\r\n            <Button color=\"instagram\" onClick={() => setShowDetails(true)}>\r\n              Add\r\n            </Button>\r\n            <Button\r\n              color=\"youtube\"\r\n              disabled={!selectedValues.length}\r\n              onClick={() => onDeleteRelation()}\r\n              content={\"Select a relation type\"}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          <Form onSubmit={formik.handleSubmit}>\r\n            <Form.Input\r\n              fluid\r\n              label=\"Relation Name\"\r\n              name=\"text\"\r\n              value={formik.values.text}\r\n              onChange={formik.handleChange}\r\n              error={formik.errors.text}\r\n              autoComplete=\"off\"\r\n            />\r\n\r\n            <Form.Input\r\n              fluid\r\n              label=\"Code\"\r\n              name=\"value\"\r\n              value={formik.values.value}\r\n              onChange={({ target: { name, value } }) =>\r\n                formik.handleChange({\r\n                  target: { name, value: value ? value.toUpperCase() : \"\" },\r\n                })\r\n              }\r\n              error={formik.errors.value}\r\n              autoComplete=\"off\"\r\n            />\r\n\r\n            <Button\r\n              color=\"orange\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                formik.resetForm();\r\n                setShowDetails(false);\r\n              }}\r\n            >\r\n              Back\r\n            </Button>\r\n\r\n            <Button\r\n              color=\"green\"\r\n              type=\"submit\"\r\n              loading={formik.isSubmitting}\r\n              disabled={formik.isSubmitting || !isEmpty(formik.errors)}\r\n              disabledContent\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Form, Grid, Menu, Segment } from \"semantic-ui-react\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport { isEmpty, postFakeRequest } from \"../utils\";\r\nimport useSocial from \"../hooks/useSocial\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useParams, useHistory, NavLink } from \"react-router-dom\";\r\nimport { IPeopleParams, IUserData } from \"../interfaces\";\r\nimport Relations from \"../components/Relations\";\r\nimport Button from \"../components/Button\";\r\nimport RelationshipTypes from \"../components/RelationshipTypes\";\r\n\r\nexport default function AddPeople() {\r\n  const { addConnection, updateConnection, connections } = useSocial();\r\n  const { peopleId } = useParams<IPeopleParams>();\r\n  const history = useHistory();\r\n\r\n  const { setValues, ...formik } = useFormik({\r\n    initialValues: {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      id: Number(peopleId) || \"new\",\r\n    },\r\n    onSubmit: (values, actions) => {\r\n      postFakeRequest(values).then((data: any) => {\r\n        let connection = {} as IUserData;\r\n        if (values.id === \"new\") {\r\n          connection = addConnection(data);\r\n          actions.setFieldValue(\"id\", connection.id);\r\n          actions.setSubmitting(false);\r\n          history.push(`/add/${connection.id}`);\r\n          toast.success(\"Successfully Added\");\r\n        } else {\r\n          updateConnection(data);\r\n          actions.setSubmitting(false);\r\n          toast.success(\"Successfully Updated\");\r\n        }\r\n      });\r\n    },\r\n    validationSchema: yup.object().shape({\r\n      firstName: yup\r\n        .string()\r\n        .required(\"Required\")\r\n        .matches(/^[aA-zZ\\s]+$/, \"Only alphabets\"),\r\n      lastName: yup\r\n        .string()\r\n        .required(\"Required\")\r\n        .matches(/^[aA-zZ\\s]+$/, \"Only alphabets\"),\r\n    }),\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!peopleId || peopleId === \"undefined\" || peopleId === \"null\")\r\n      history.goBack();\r\n\r\n    setValues(\r\n      connections.find((c) => c.id === Number(peopleId)) || {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        id: Number(peopleId) || \"new\",\r\n      }\r\n    );\r\n  }, [peopleId, connections]);\r\n\r\n  return (\r\n    <>\r\n      <Menu attached=\"top\">\r\n        <Menu.Item header>Person And Relations</Menu.Item>\r\n      </Menu>\r\n      <Segment attached=\"bottom\">\r\n        <Grid>\r\n          <Grid.Row>\r\n            <Grid.Column computer={8} tablet={8} mobile={16} largeScreen={8}>\r\n              <Form onSubmit={formik.handleSubmit}>\r\n                <Form.Input\r\n                  label=\"First Name\"\r\n                  name=\"firstName\"\r\n                  value={formik.values.firstName}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.errors.firstName}\r\n                  autoComplete=\"off\"\r\n                />\r\n                <Form.Input\r\n                  label=\"Last Name\"\r\n                  name=\"lastName\"\r\n                  value={formik.values.lastName}\r\n                  onChange={formik.handleChange}\r\n                  error={formik.errors.lastName}\r\n                  autoComplete=\"off\"\r\n                />\r\n\r\n                <Button color=\"orange\" type=\"button\" as={NavLink} to={\"/\"}>\r\n                  Back\r\n                </Button>\r\n\r\n                <Button\r\n                  color=\"green\"\r\n                  type=\"submit\"\r\n                  loading={formik.isSubmitting}\r\n                  disabled={formik.isSubmitting || !isEmpty(formik.errors)}\r\n                  style={{ marginBottom: 20 }}\r\n                  disabledContent\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </Form>\r\n            </Grid.Column>\r\n            <Grid.Column computer={8} tablet={8} mobile={16} largeScreen={8}>\r\n              <Relations />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </Segment>\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column computer={8} tablet={16}>\r\n            <RelationshipTypes />\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import { useContext } from \"react\";\r\nimport { SocialContext } from \"../context/SocialContext\";\r\n\r\nexport default function useSocial() {\r\n  return useContext(SocialContext);\r\n}\r\n","import { Button as SemanticButton, Popup } from \"semantic-ui-react\";\r\nimport { IPopupProps, IButtonProps } from \"../interfaces\";\r\n\r\nexport default function Button(props: IButtonProps | IPopupProps) {\r\n  const buttonProps = { as: props.as, to: props.to, onClick: props.onClick };\r\n  const defaultButtonProps = {\r\n    color: props.color,\r\n    className: props.disabled\r\n      ? `disabled-button${props.className ? \" \" + props.className : \"\"}`\r\n      : props.className,\r\n    style: props.style,\r\n    type: props.type,\r\n  };\r\n  const mergeButtonProps = props.disabled\r\n    ? defaultButtonProps\r\n    : { ...defaultButtonProps, ...buttonProps };\r\n  const button = (\r\n    <SemanticButton {...mergeButtonProps}>{props.children}</SemanticButton>\r\n  );\r\n\r\n  return props.disabled ? (\r\n    <Popup\r\n      disabled={props.disabledContent}\r\n      content={props.content}\r\n      trigger={button}\r\n    />\r\n  ) : (\r\n    button\r\n  );\r\n}\r\n","import ReactDataGrid from \"@inovua/reactdatagrid-community\";\r\nimport { IDataGrid } from \"../interfaces\";\r\nimport styled from \"styled-components\";\r\n\r\nconst GridWrapper = styled(ReactDataGrid)`\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport default function DataGrid({\r\n  idProperty,\r\n  columns,\r\n  rows,\r\n  minHeight,\r\n  checkboxColumn,\r\n  checkboxOnlyRowSelect,\r\n  onSelectionChange,\r\n}: IDataGrid) {\r\n  return (\r\n    <GridWrapper\r\n      idProperty={idProperty}\r\n      columns={columns}\r\n      dataSource={rows}\r\n      style={{ minHeight }}\r\n      pagination\r\n      limit={40}\r\n      checkboxColumn={checkboxColumn}\r\n      checkboxOnlyRowSelect={checkboxOnlyRowSelect}\r\n      onSelectionChange={(data: any) => {\r\n        if (!!onSelectionChange) onSelectionChange(data);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import DataGrid from \"./DataGrid\";\r\nimport { IPeopleGrid } from \"../interfaces\";\r\n\r\nconst columns = [\r\n  {\r\n    name: \"id\",\r\n    header: \"ID\",\r\n    minWidth: 60,\r\n    defaultFlex: 0.4,\r\n  },\r\n  {\r\n    name: \"fullName\",\r\n    header: \"Name\",\r\n    minWidth: 50,\r\n    defaultFlex: 3,\r\n    render: ({ data }: any) => `${data.firstName} ${data.lastName}`,\r\n  },\r\n];\r\n\r\nexport default function PeopleGrid({\r\n  rows,\r\n  minHeight,\r\n  onSelectionChange,\r\n}: IPeopleGrid) {\r\n  return (\r\n    <DataGrid\r\n      idProperty=\"id\"\r\n      minHeight={minHeight}\r\n      columns={columns}\r\n      rows={rows}\r\n      checkboxColumn\r\n      checkboxOnlyRowSelect\r\n      onSelectionChange={({ selected }) => onSelectionChange(selected)}\r\n    />\r\n  );\r\n}\r\n"],"sourceRoot":""}