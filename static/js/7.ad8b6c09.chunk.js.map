{"version":3,"sources":["../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticGroup.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticLabel.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/StatisticValue.js","../node_modules/semantic-ui-react/dist/es/views/Statistic/Statistic.js","components/SocialStatistic.tsx","pages/Home.tsx","hooks/useSocial.ts","components/Button.tsx","components/DataGrid.tsx","components/PeopleGrid.tsx"],"names":["StatisticGroup","props","children","className","color","content","horizontal","inverted","items","size","widths","classes","cx","useKeyOnly","useWidthProp","rest","getUnhandledProps","ElementType","getElementType","childrenUtils","isNil","React","createElement","_extends","_map","item","Statistic","create","handledProps","propTypes","StatisticLabel","createShorthandFactory","StatisticValue","text","floated","label","value","useValueAndKey","defaultProps","autoGenerateKey","Group","Label","Value","SocialStatistic","useSocial","connections","relations","length","Icon","name","Home","useState","selectedIds","setSelectedIds","Segment","PeopleGrid","rows","minHeight","onSelectionChange","selected","map","r","Number","id","Object","keys","s","Button","disabled","as","NavLink","to","useContext","SocialContext","buttonProps","onClick","defaultButtonProps","style","type","mergeButtonProps","button","disabledContent","trigger","GridWrapper","styled","ReactDataGrid","DataGrid","idProperty","columns","checkboxColumn","checkboxOnlyRowSelect","dataSource","pagination","limit","data","header","minWidth","defaultFlex","render","firstName","lastName"],"mappings":"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","file":"static/js/7.ad8b6c09.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport _map from \"lodash-es/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useWidthProp } from '../../lib';\nimport Statistic from './Statistic';\n/**\n * A group of statistics.\n */\n\nfunction StatisticGroup(props) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      items = props.items,\n      size = props.size,\n      widths = props.widths;\n  var classes = cx('ui', color, size, useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useWidthProp(widths), 'statistics', className);\n  var rest = getUnhandledProps(StatisticGroup, props);\n  var ElementType = getElementType(StatisticGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(items, function (item) {\n    return Statistic.create(item);\n  }));\n}\n\nStatisticGroup.handledProps = [\"as\", \"children\", \"className\", \"color\", \"content\", \"horizontal\", \"inverted\", \"items\", \"size\", \"widths\"];\nStatisticGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A statistic group can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A statistic group can present its measurement horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** A statistic group can be formatted to fit on a dark background. */\n  inverted: PropTypes.bool,\n\n  /** Array of props for Statistic. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A statistic group can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'medium')),\n\n  /** A statistic group can have its items divided evenly. */\n  widths: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nexport default StatisticGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A statistic can contain a label to help provide context for the presented value.\n */\n\nfunction StatisticLabel(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('label', className);\n  var rest = getUnhandledProps(StatisticLabel, props);\n  var ElementType = getElementType(StatisticLabel, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticLabel.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nStatisticLabel.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nStatisticLabel.create = createShorthandFactory(StatisticLabel, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticLabel;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A statistic can contain a numeric, icon, image, or text value.\n */\n\nfunction StatisticValue(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      text = props.text;\n  var classes = cx(useKeyOnly(text, 'text'), 'value', className);\n  var rest = getUnhandledProps(StatisticValue, props);\n  var ElementType = getElementType(StatisticValue, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nStatisticValue.handledProps = [\"as\", \"children\", \"className\", \"content\", \"text\"];\nStatisticValue.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Format the value with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool\n} : {};\nStatisticValue.create = createShorthandFactory(StatisticValue, function (content) {\n  return {\n    content: content\n  };\n});\nexport default StatisticValue;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useValueAndKey } from '../../lib';\nimport StatisticGroup from './StatisticGroup';\nimport StatisticLabel from './StatisticLabel';\nimport StatisticValue from './StatisticValue';\n/**\n * A statistic emphasizes the current value of an attribute.\n */\n\nfunction Statistic(props) {\n  var children = props.children,\n      className = props.className,\n      color = props.color,\n      content = props.content,\n      floated = props.floated,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      label = props.label,\n      size = props.size,\n      text = props.text,\n      value = props.value;\n  var classes = cx('ui', color, size, useValueAndKey(floated, 'floated'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), 'statistic', className);\n  var rest = getUnhandledProps(Statistic, props);\n  var ElementType = getElementType(Statistic, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), StatisticValue.create(value, {\n    defaultProps: {\n      text: text\n    },\n    autoGenerateKey: false\n  }), StatisticLabel.create(label, {\n    autoGenerateKey: false\n  }));\n}\n\nStatistic.handledProps = [\"as\", \"children\", \"className\", \"color\", \"content\", \"floated\", \"horizontal\", \"inverted\", \"label\", \"size\", \"text\", \"value\"];\nStatistic.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A statistic can be formatted to be different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A statistic can sit to the left or right of other content. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A statistic can present its measurement horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** A statistic can be formatted to fit on a dark background. */\n  inverted: PropTypes.bool,\n\n  /** Label content of the Statistic. */\n  label: customPropTypes.contentShorthand,\n\n  /** A statistic can vary in size. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'big', 'massive', 'medium')),\n\n  /** Format the StatisticValue with smaller font size to fit nicely beside number values. */\n  text: PropTypes.bool,\n\n  /** Value content of the Statistic. */\n  value: customPropTypes.contentShorthand\n} : {};\nStatistic.Group = StatisticGroup;\nStatistic.Label = StatisticLabel;\nStatistic.Value = StatisticValue;\nStatistic.create = createShorthandFactory(Statistic, function (content) {\n  return {\n    content: content\n  };\n});\nexport default Statistic;","import { Statistic, Icon } from \"semantic-ui-react\";\r\nimport useSocial from \"../hooks/useSocial\";\r\n\r\nexport default function SocialStatistic() {\r\n  const { connections, relations } = useSocial();\r\n  return (\r\n    <Statistic.Group widths=\"two\">\r\n      <Statistic color=\"blue\">\r\n        <Statistic.Value>{connections.length}</Statistic.Value>\r\n        <Statistic.Label>Persons</Statistic.Label>\r\n      </Statistic>\r\n\r\n      <Statistic color=\"purple\">\r\n        <Statistic.Value>\r\n          <Icon name=\"angle right\" />\r\n          {relations.length}\r\n        </Statistic.Value>\r\n        <Statistic.Label>In Relations</Statistic.Label>\r\n      </Statistic>\r\n    </Statistic.Group>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Segment } from \"semantic-ui-react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport PeopleGrid from \"../components/PeopleGrid\";\r\nimport useSocial from \"../hooks/useSocial\";\r\nimport Button from \"../components/Button\";\r\nimport SocialStatistic from \"../components/SocialStatistic\";\r\n\r\nfunction Home() {\r\n  const { connections } = useSocial();\r\n  const [selectedIds, setSelectedIds] = useState<number[]>([]);\r\n  return (\r\n    <>\r\n      <Segment>\r\n        <SocialStatistic />\r\n      </Segment>\r\n      <Segment>\r\n        <PeopleGrid\r\n          rows={connections}\r\n          minHeight={550}\r\n          onSelectionChange={(selected) =>\r\n            setSelectedIds(\r\n              typeof selected === \"boolean\"\r\n                ? connections.map((r) => Number(r.id))\r\n                : Object.keys(selected).map((s) => Number(s))\r\n            )\r\n          }\r\n        />\r\n        <Button\r\n          color=\"instagram\"\r\n          disabled={selectedIds.length !== 1}\r\n          as={NavLink}\r\n          to={`/add/${selectedIds[0]}`}\r\n          content={\"Select one person\"}\r\n        >\r\n          Update\r\n        </Button>\r\n        <Button\r\n          color=\"instagram\"\r\n          disabled={selectedIds.length !== 2}\r\n          content={\"Select two person\"}\r\n          as={NavLink}\r\n          to={`/relationship/${selectedIds[0]}-${selectedIds[1]}`}\r\n        >\r\n          Show\r\n        </Button>\r\n      </Segment>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { useContext } from \"react\";\r\nimport { SocialContext } from \"../context/SocialContext\";\r\n\r\nexport default function useSocial() {\r\n  return useContext(SocialContext);\r\n}\r\n","import { Button as SemanticButton, Popup } from \"semantic-ui-react\";\r\nimport { IPopupProps, IButtonProps } from \"../interfaces\";\r\n\r\nexport default function Button(props: IButtonProps | IPopupProps) {\r\n  const buttonProps = { as: props.as, to: props.to, onClick: props.onClick };\r\n  const defaultButtonProps = {\r\n    color: props.color,\r\n    className: props.disabled\r\n      ? `disabled-button${props.className ? \" \" + props.className : \"\"}`\r\n      : props.className,\r\n    style: props.style,\r\n    type: props.type,\r\n  };\r\n  const mergeButtonProps = props.disabled\r\n    ? defaultButtonProps\r\n    : { ...defaultButtonProps, ...buttonProps };\r\n  const button = (\r\n    <SemanticButton {...mergeButtonProps}>{props.children}</SemanticButton>\r\n  );\r\n\r\n  return props.disabled ? (\r\n    <Popup\r\n      disabled={props.disabledContent}\r\n      content={props.content}\r\n      trigger={button}\r\n    />\r\n  ) : (\r\n    button\r\n  );\r\n}\r\n","import ReactDataGrid from \"@inovua/reactdatagrid-community\";\r\nimport { IDataGrid } from \"../interfaces\";\r\nimport styled from \"styled-components\";\r\n\r\nconst GridWrapper = styled(ReactDataGrid)`\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport default function DataGrid({\r\n  idProperty,\r\n  columns,\r\n  rows,\r\n  minHeight,\r\n  checkboxColumn,\r\n  checkboxOnlyRowSelect,\r\n  onSelectionChange,\r\n}: IDataGrid) {\r\n  return (\r\n    <GridWrapper\r\n      idProperty={idProperty}\r\n      columns={columns}\r\n      dataSource={rows}\r\n      style={{ minHeight }}\r\n      pagination\r\n      limit={40}\r\n      checkboxColumn={checkboxColumn}\r\n      checkboxOnlyRowSelect={checkboxOnlyRowSelect}\r\n      onSelectionChange={(data: any) => {\r\n        if (!!onSelectionChange) onSelectionChange(data);\r\n      }}\r\n    />\r\n  );\r\n}\r\n","import DataGrid from \"./DataGrid\";\r\nimport { IPeopleGrid } from \"../interfaces\";\r\n\r\nconst columns = [\r\n  {\r\n    name: \"id\",\r\n    header: \"ID\",\r\n    minWidth: 60,\r\n    defaultFlex: 0.4,\r\n  },\r\n  {\r\n    name: \"fullName\",\r\n    header: \"Name\",\r\n    minWidth: 50,\r\n    defaultFlex: 3,\r\n    render: ({ data }: any) => `${data.firstName} ${data.lastName}`,\r\n  },\r\n];\r\n\r\nexport default function PeopleGrid({\r\n  rows,\r\n  minHeight,\r\n  onSelectionChange,\r\n}: IPeopleGrid) {\r\n  return (\r\n    <DataGrid\r\n      idProperty=\"id\"\r\n      minHeight={minHeight}\r\n      columns={columns}\r\n      rows={rows}\r\n      checkboxColumn\r\n      checkboxOnlyRowSelect\r\n      onSelectionChange={({ selected }) => onSelectionChange(selected)}\r\n    />\r\n  );\r\n}\r\n"],"sourceRoot":""}